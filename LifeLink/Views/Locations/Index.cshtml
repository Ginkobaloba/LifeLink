@model IEnumerable<LifeLink.Models.LocationViewModel>

@{
    ViewBag.Title = "LifeLink - Welcome";
}

@*<h2>Select Location</h2>*@
@*<div class="col-md-12">
    <form class="register">
        <div class="register-switch">
            <input type="radio" name="sex" value="H" id="sex_f" class="register-switch-input" checked>
            <label for="sex_f" class="register-switch-label">Home</label>
            <input type="radio" name="sex" value="C" id="sex_m" class="register-switch-input">
            <label for="sex_m" class="register-switch-label">Current</label>
        </div>
        <input type="button" value="Select closest" class="register-button" onclick="HomeOrCurrent(document.getElementById('sex_f').checked)">
        <input type="button" value="Make Appointment" class="register-button" onclick="myFunction()">
    </form>
</div>*@
<h1 class="register-title">Select Location</h1>
<form class="register">
    <div class="register-switch">   
        <input type="radio" name="sex" value="H" id="sex_f" class="register-switch-input">
        <label for="sex_f" class="register-switch-label">Home</label>
        <input type="radio" name="sex" value="C" id="sex_m" class="register-switch-input" checked>
        <label for="sex_m" class="register-switch-label">Current</label>
    </div>
    <input type="button" value="Select closest" class="btn btn-default" onclick="initMap();" />
    <br />
    <p><a class="btn btn-default" href="@Url.Action("Create","Appointments")">Make Appointment</a></p>
</form>
<div id="map"></div>
    <script>
        function initMap() {
            if (document.getElementById("sex_f").checked == true) {
                @foreach(var item in Model)
                {
                    if (@item.personlng == -3)
                    {                  }
                    else
                    {
                    <text>
                    var homeaddress = @item.personlat + "," + @item.personlng;
                    var site = @item.LocationLat + "," + @item.LocationLong;
                    calculateRoute(homeaddress, site);
                    </text>
                    }

                }
            }
            else {
                navigator.geolocation.getCurrentPosition(currentPosition, HomePosition);
            }
        }
        function currentPosition(position) {

           @foreach(var item in Model)
            {
                if (@item.personlng == -3)
                {                  }
                else
                {
                    <text>
                    var homeaddress = position.coords.latitude + "," + position.coords.longitude;
                    var site = @item.LocationLat + "," + @item.LocationLong;
                    calculateRoute(homeaddress, site);
                    </text>
                }

            }




        }
        function HomePosition(data) {
            //document.getElementById("sex_f").checked = true;
            @foreach(var item in Model)
            {
                if (@item.personlng == -3)
                {                  }
                else
                {
                    <text>
                    var homeaddress = @item.personlat + "," + @item.personlng;
                    var site = @item.LocationLat + "," + @item.LocationLong;
                    calculateRoute(homeaddress, site);
                    </text>
                }

            }


        }

        function calculateRoute(from, to) {
            var myOptions = {
                zoom: 10,
                center: new google.maps.LatLng(from),
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };

            var mapObject = new google.maps.Map(document.getElementById("map"), myOptions);

            var directionsService = new google.maps.DirectionsService();
            var directionsRequest = {
                origin: from,
                destination: to,
                travelMode: google.maps.DirectionsTravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.imperial
            };
            directionsService.route(
              directionsRequest,
              function (response, status) {
                  if (status == google.maps.DirectionsStatus.OK) {
                      new google.maps.DirectionsRenderer({
                          map: mapObject,
                          directions: response
                      });
                  }
                  else
                      $("#map").append("Unable to retrieve your route<br />");
              }
            );
        }






    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDPhuvNN439sVvdr5Fpg4maQjMCz-FtAZM&callback=initMap">
    </script>
